// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.talend_app_poc_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: talend_app_poc Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class talend_app_poc implements TalendJob {
	static {System.setProperty("TalendJob.log", "talend_app_poc.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(talend_app_poc.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "talend_app_poc";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_FnvOsAoMEeu2hukYDDQcbA", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("_FnvOsAoMEeu2hukYDDQcbA", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				talend_app_poc.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(talend_app_poc.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tKafkaInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tKafkaInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendStats_STATS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendStats_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendStats_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendMeter_METTER_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendMeter_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendMeter_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tKafkaInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int txn_msg_id;

				public int getTxn_msg_id () {
					return this.txn_msg_id;
				}
				
			    public String brwr_class_type_nm;

				public String getBrwr_class_type_nm () {
					return this.brwr_class_type_nm;
				}
				
			    public Integer brwr_id;

				public Integer getBrwr_id () {
					return this.brwr_id;
				}
				
			    public String first_nm;

				public String getFirst_nm () {
					return this.first_nm;
				}
				
			    public String lst_nm;

				public String getLst_nm () {
					return this.lst_nm;
				}
				
			    public String mid_nm;

				public String getMid_nm () {
					return this.mid_nm;
				}
				
			    public String sfx_nm;

				public String getSfx_nm () {
					return this.sfx_nm;
				}
				
			    public java.util.Date brth_dt;

				public java.util.Date getBrth_dt () {
					return this.brth_dt;
				}
				
			    public String cr_rpt_auth_ind;

				public String getCr_rpt_auth_ind () {
					return this.cr_rpt_auth_ind;
				}
				
			    public Integer depnt_ct;

				public Integer getDepnt_ct () {
					return this.depnt_ct;
				}
				
			    public String marr_stat_type_nm;

				public String getMarr_stat_type_nm () {
					return this.marr_stat_type_nm;
				}
				
			    public Integer cr_score_num;

				public Integer getCr_score_num () {
					return this.cr_score_num;
				}
				
			    public String citzn_resd_type_nm;

				public String getCitzn_resd_type_nm () {
					return this.citzn_resd_type_nm;
				}
				
			    public String gndr_type_nm;

				public String getGndr_type_nm () {
					return this.gndr_type_nm;
				}
				
			    public String resd_addr_line_txt;

				public String getResd_addr_line_txt () {
					return this.resd_addr_line_txt;
				}
				
			    public String mail_addr_line_txt;

				public String getMail_addr_line_txt () {
					return this.mail_addr_line_txt;
				}
				
			    public String mail_city_nm;

				public String getMail_city_nm () {
					return this.mail_city_nm;
				}
				
			    public String mail_pstl_cd;

				public String getMail_pstl_cd () {
					return this.mail_pstl_cd;
				}
				
			    public String mail_st_cd;

				public String getMail_st_cd () {
					return this.mail_st_cd;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.txn_msg_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.txn_msg_id != other.txn_msg_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.txn_msg_id = this.txn_msg_id;
	            other.brwr_class_type_nm = this.brwr_class_type_nm;
	            other.brwr_id = this.brwr_id;
	            other.first_nm = this.first_nm;
	            other.lst_nm = this.lst_nm;
	            other.mid_nm = this.mid_nm;
	            other.sfx_nm = this.sfx_nm;
	            other.brth_dt = this.brth_dt;
	            other.cr_rpt_auth_ind = this.cr_rpt_auth_ind;
	            other.depnt_ct = this.depnt_ct;
	            other.marr_stat_type_nm = this.marr_stat_type_nm;
	            other.cr_score_num = this.cr_score_num;
	            other.citzn_resd_type_nm = this.citzn_resd_type_nm;
	            other.gndr_type_nm = this.gndr_type_nm;
	            other.resd_addr_line_txt = this.resd_addr_line_txt;
	            other.mail_addr_line_txt = this.mail_addr_line_txt;
	            other.mail_city_nm = this.mail_city_nm;
	            other.mail_pstl_cd = this.mail_pstl_cd;
	            other.mail_st_cd = this.mail_st_cd;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.txn_msg_id = this.txn_msg_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
			        this.txn_msg_id = dis.readInt();
					
					this.brwr_class_type_nm = readString(dis);
					
						this.brwr_id = readInteger(dis);
					
					this.first_nm = readString(dis);
					
					this.lst_nm = readString(dis);
					
					this.mid_nm = readString(dis);
					
					this.sfx_nm = readString(dis);
					
					this.brth_dt = readDate(dis);
					
					this.cr_rpt_auth_ind = readString(dis);
					
						this.depnt_ct = readInteger(dis);
					
					this.marr_stat_type_nm = readString(dis);
					
						this.cr_score_num = readInteger(dis);
					
					this.citzn_resd_type_nm = readString(dis);
					
					this.gndr_type_nm = readString(dis);
					
					this.resd_addr_line_txt = readString(dis);
					
					this.mail_addr_line_txt = readString(dis);
					
					this.mail_city_nm = readString(dis);
					
					this.mail_pstl_cd = readString(dis);
					
					this.mail_st_cd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.txn_msg_id);
					
					// String
				
						writeString(this.brwr_class_type_nm,dos);
					
					// Integer
				
						writeInteger(this.brwr_id,dos);
					
					// String
				
						writeString(this.first_nm,dos);
					
					// String
				
						writeString(this.lst_nm,dos);
					
					// String
				
						writeString(this.mid_nm,dos);
					
					// String
				
						writeString(this.sfx_nm,dos);
					
					// java.util.Date
				
						writeDate(this.brth_dt,dos);
					
					// String
				
						writeString(this.cr_rpt_auth_ind,dos);
					
					// Integer
				
						writeInteger(this.depnt_ct,dos);
					
					// String
				
						writeString(this.marr_stat_type_nm,dos);
					
					// Integer
				
						writeInteger(this.cr_score_num,dos);
					
					// String
				
						writeString(this.citzn_resd_type_nm,dos);
					
					// String
				
						writeString(this.gndr_type_nm,dos);
					
					// String
				
						writeString(this.resd_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_city_nm,dos);
					
					// String
				
						writeString(this.mail_pstl_cd,dos);
					
					// String
				
						writeString(this.mail_st_cd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("txn_msg_id="+String.valueOf(txn_msg_id));
		sb.append(",brwr_class_type_nm="+brwr_class_type_nm);
		sb.append(",brwr_id="+String.valueOf(brwr_id));
		sb.append(",first_nm="+first_nm);
		sb.append(",lst_nm="+lst_nm);
		sb.append(",mid_nm="+mid_nm);
		sb.append(",sfx_nm="+sfx_nm);
		sb.append(",brth_dt="+String.valueOf(brth_dt));
		sb.append(",cr_rpt_auth_ind="+cr_rpt_auth_ind);
		sb.append(",depnt_ct="+String.valueOf(depnt_ct));
		sb.append(",marr_stat_type_nm="+marr_stat_type_nm);
		sb.append(",cr_score_num="+String.valueOf(cr_score_num));
		sb.append(",citzn_resd_type_nm="+citzn_resd_type_nm);
		sb.append(",gndr_type_nm="+gndr_type_nm);
		sb.append(",resd_addr_line_txt="+resd_addr_line_txt);
		sb.append(",mail_addr_line_txt="+mail_addr_line_txt);
		sb.append(",mail_city_nm="+mail_city_nm);
		sb.append(",mail_pstl_cd="+mail_pstl_cd);
		sb.append(",mail_st_cd="+mail_st_cd);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(txn_msg_id);
        			
        			sb.append("|");
        		
        				if(brwr_class_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_class_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brwr_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_id);
            			}
            		
        			sb.append("|");
        		
        				if(first_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(first_nm);
            			}
            		
        			sb.append("|");
        		
        				if(lst_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(lst_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mid_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mid_nm);
            			}
            		
        			sb.append("|");
        		
        				if(sfx_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(sfx_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brth_dt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brth_dt);
            			}
            		
        			sb.append("|");
        		
        				if(cr_rpt_auth_ind == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_rpt_auth_ind);
            			}
            		
        			sb.append("|");
        		
        				if(depnt_ct == null){
        					sb.append("<null>");
        				}else{
            				sb.append(depnt_ct);
            			}
            		
        			sb.append("|");
        		
        				if(marr_stat_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(marr_stat_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(cr_score_num == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_score_num);
            			}
            		
        			sb.append("|");
        		
        				if(citzn_resd_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(citzn_resd_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(gndr_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(gndr_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(resd_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resd_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_city_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_city_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mail_pstl_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_pstl_cd);
            			}
            		
        			sb.append("|");
        		
        				if(mail_st_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_st_cd);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.txn_msg_id, other.txn_msg_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class brwrStruct implements routines.system.IPersistableRow<brwrStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int txn_msg_id;

				public int getTxn_msg_id () {
					return this.txn_msg_id;
				}
				
			    public String brwr_class_type_nm;

				public String getBrwr_class_type_nm () {
					return this.brwr_class_type_nm;
				}
				
			    public Integer brwr_id;

				public Integer getBrwr_id () {
					return this.brwr_id;
				}
				
			    public String first_nm;

				public String getFirst_nm () {
					return this.first_nm;
				}
				
			    public String lst_nm;

				public String getLst_nm () {
					return this.lst_nm;
				}
				
			    public String mid_nm;

				public String getMid_nm () {
					return this.mid_nm;
				}
				
			    public String sfx_nm;

				public String getSfx_nm () {
					return this.sfx_nm;
				}
				
			    public java.util.Date brth_dt;

				public java.util.Date getBrth_dt () {
					return this.brth_dt;
				}
				
			    public String cr_rpt_auth_ind;

				public String getCr_rpt_auth_ind () {
					return this.cr_rpt_auth_ind;
				}
				
			    public Integer depnt_ct;

				public Integer getDepnt_ct () {
					return this.depnt_ct;
				}
				
			    public String marr_stat_type_nm;

				public String getMarr_stat_type_nm () {
					return this.marr_stat_type_nm;
				}
				
			    public Integer cr_score_num;

				public Integer getCr_score_num () {
					return this.cr_score_num;
				}
				
			    public String citzn_resd_type_nm;

				public String getCitzn_resd_type_nm () {
					return this.citzn_resd_type_nm;
				}
				
			    public String gndr_type_nm;

				public String getGndr_type_nm () {
					return this.gndr_type_nm;
				}
				
			    public String resd_addr_line_txt;

				public String getResd_addr_line_txt () {
					return this.resd_addr_line_txt;
				}
				
			    public String mail_addr_line_txt;

				public String getMail_addr_line_txt () {
					return this.mail_addr_line_txt;
				}
				
			    public String mail_city_nm;

				public String getMail_city_nm () {
					return this.mail_city_nm;
				}
				
			    public String mail_pstl_cd;

				public String getMail_pstl_cd () {
					return this.mail_pstl_cd;
				}
				
			    public String mail_st_cd;

				public String getMail_st_cd () {
					return this.mail_st_cd;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.txn_msg_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final brwrStruct other = (brwrStruct) obj;
		
						if (this.txn_msg_id != other.txn_msg_id)
							return false;
					

		return true;
    }

	public void copyDataTo(brwrStruct other) {

		other.txn_msg_id = this.txn_msg_id;
	            other.brwr_class_type_nm = this.brwr_class_type_nm;
	            other.brwr_id = this.brwr_id;
	            other.first_nm = this.first_nm;
	            other.lst_nm = this.lst_nm;
	            other.mid_nm = this.mid_nm;
	            other.sfx_nm = this.sfx_nm;
	            other.brth_dt = this.brth_dt;
	            other.cr_rpt_auth_ind = this.cr_rpt_auth_ind;
	            other.depnt_ct = this.depnt_ct;
	            other.marr_stat_type_nm = this.marr_stat_type_nm;
	            other.cr_score_num = this.cr_score_num;
	            other.citzn_resd_type_nm = this.citzn_resd_type_nm;
	            other.gndr_type_nm = this.gndr_type_nm;
	            other.resd_addr_line_txt = this.resd_addr_line_txt;
	            other.mail_addr_line_txt = this.mail_addr_line_txt;
	            other.mail_city_nm = this.mail_city_nm;
	            other.mail_pstl_cd = this.mail_pstl_cd;
	            other.mail_st_cd = this.mail_st_cd;
	            
	}

	public void copyKeysDataTo(brwrStruct other) {

		other.txn_msg_id = this.txn_msg_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
			        this.txn_msg_id = dis.readInt();
					
					this.brwr_class_type_nm = readString(dis);
					
						this.brwr_id = readInteger(dis);
					
					this.first_nm = readString(dis);
					
					this.lst_nm = readString(dis);
					
					this.mid_nm = readString(dis);
					
					this.sfx_nm = readString(dis);
					
					this.brth_dt = readDate(dis);
					
					this.cr_rpt_auth_ind = readString(dis);
					
						this.depnt_ct = readInteger(dis);
					
					this.marr_stat_type_nm = readString(dis);
					
						this.cr_score_num = readInteger(dis);
					
					this.citzn_resd_type_nm = readString(dis);
					
					this.gndr_type_nm = readString(dis);
					
					this.resd_addr_line_txt = readString(dis);
					
					this.mail_addr_line_txt = readString(dis);
					
					this.mail_city_nm = readString(dis);
					
					this.mail_pstl_cd = readString(dis);
					
					this.mail_st_cd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.txn_msg_id);
					
					// String
				
						writeString(this.brwr_class_type_nm,dos);
					
					// Integer
				
						writeInteger(this.brwr_id,dos);
					
					// String
				
						writeString(this.first_nm,dos);
					
					// String
				
						writeString(this.lst_nm,dos);
					
					// String
				
						writeString(this.mid_nm,dos);
					
					// String
				
						writeString(this.sfx_nm,dos);
					
					// java.util.Date
				
						writeDate(this.brth_dt,dos);
					
					// String
				
						writeString(this.cr_rpt_auth_ind,dos);
					
					// Integer
				
						writeInteger(this.depnt_ct,dos);
					
					// String
				
						writeString(this.marr_stat_type_nm,dos);
					
					// Integer
				
						writeInteger(this.cr_score_num,dos);
					
					// String
				
						writeString(this.citzn_resd_type_nm,dos);
					
					// String
				
						writeString(this.gndr_type_nm,dos);
					
					// String
				
						writeString(this.resd_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_city_nm,dos);
					
					// String
				
						writeString(this.mail_pstl_cd,dos);
					
					// String
				
						writeString(this.mail_st_cd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("txn_msg_id="+String.valueOf(txn_msg_id));
		sb.append(",brwr_class_type_nm="+brwr_class_type_nm);
		sb.append(",brwr_id="+String.valueOf(brwr_id));
		sb.append(",first_nm="+first_nm);
		sb.append(",lst_nm="+lst_nm);
		sb.append(",mid_nm="+mid_nm);
		sb.append(",sfx_nm="+sfx_nm);
		sb.append(",brth_dt="+String.valueOf(brth_dt));
		sb.append(",cr_rpt_auth_ind="+cr_rpt_auth_ind);
		sb.append(",depnt_ct="+String.valueOf(depnt_ct));
		sb.append(",marr_stat_type_nm="+marr_stat_type_nm);
		sb.append(",cr_score_num="+String.valueOf(cr_score_num));
		sb.append(",citzn_resd_type_nm="+citzn_resd_type_nm);
		sb.append(",gndr_type_nm="+gndr_type_nm);
		sb.append(",resd_addr_line_txt="+resd_addr_line_txt);
		sb.append(",mail_addr_line_txt="+mail_addr_line_txt);
		sb.append(",mail_city_nm="+mail_city_nm);
		sb.append(",mail_pstl_cd="+mail_pstl_cd);
		sb.append(",mail_st_cd="+mail_st_cd);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(txn_msg_id);
        			
        			sb.append("|");
        		
        				if(brwr_class_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_class_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brwr_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_id);
            			}
            		
        			sb.append("|");
        		
        				if(first_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(first_nm);
            			}
            		
        			sb.append("|");
        		
        				if(lst_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(lst_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mid_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mid_nm);
            			}
            		
        			sb.append("|");
        		
        				if(sfx_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(sfx_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brth_dt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brth_dt);
            			}
            		
        			sb.append("|");
        		
        				if(cr_rpt_auth_ind == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_rpt_auth_ind);
            			}
            		
        			sb.append("|");
        		
        				if(depnt_ct == null){
        					sb.append("<null>");
        				}else{
            				sb.append(depnt_ct);
            			}
            		
        			sb.append("|");
        		
        				if(marr_stat_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(marr_stat_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(cr_score_num == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_score_num);
            			}
            		
        			sb.append("|");
        		
        				if(citzn_resd_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(citzn_resd_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(gndr_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(gndr_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(resd_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resd_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_city_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_city_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mail_pstl_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_pstl_cd);
            			}
            		
        			sb.append("|");
        		
        				if(mail_st_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_st_cd);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(brwrStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.txn_msg_id, other.txn_msg_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public int txn_msg_id;

				public int getTxn_msg_id () {
					return this.txn_msg_id;
				}
				
			    public String brwr_class_type_nm;

				public String getBrwr_class_type_nm () {
					return this.brwr_class_type_nm;
				}
				
			    public Integer brwr_id;

				public Integer getBrwr_id () {
					return this.brwr_id;
				}
				
			    public String first_nm;

				public String getFirst_nm () {
					return this.first_nm;
				}
				
			    public String lst_nm;

				public String getLst_nm () {
					return this.lst_nm;
				}
				
			    public String mid_nm;

				public String getMid_nm () {
					return this.mid_nm;
				}
				
			    public String sfx_nm;

				public String getSfx_nm () {
					return this.sfx_nm;
				}
				
			    public java.util.Date brth_dt;

				public java.util.Date getBrth_dt () {
					return this.brth_dt;
				}
				
			    public String cr_rpt_auth_ind;

				public String getCr_rpt_auth_ind () {
					return this.cr_rpt_auth_ind;
				}
				
			    public Integer depnt_ct;

				public Integer getDepnt_ct () {
					return this.depnt_ct;
				}
				
			    public String marr_stat_type_nm;

				public String getMarr_stat_type_nm () {
					return this.marr_stat_type_nm;
				}
				
			    public Integer cr_score_num;

				public Integer getCr_score_num () {
					return this.cr_score_num;
				}
				
			    public String citzn_resd_type_nm;

				public String getCitzn_resd_type_nm () {
					return this.citzn_resd_type_nm;
				}
				
			    public String gndr_type_nm;

				public String getGndr_type_nm () {
					return this.gndr_type_nm;
				}
				
			    public String resd_addr_line_txt;

				public String getResd_addr_line_txt () {
					return this.resd_addr_line_txt;
				}
				
			    public String mail_addr_line_txt;

				public String getMail_addr_line_txt () {
					return this.mail_addr_line_txt;
				}
				
			    public String mail_city_nm;

				public String getMail_city_nm () {
					return this.mail_city_nm;
				}
				
			    public String mail_pstl_cd;

				public String getMail_pstl_cd () {
					return this.mail_pstl_cd;
				}
				
			    public String mail_st_cd;

				public String getMail_st_cd () {
					return this.mail_st_cd;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
			        this.txn_msg_id = dis.readInt();
					
					this.brwr_class_type_nm = readString(dis);
					
						this.brwr_id = readInteger(dis);
					
					this.first_nm = readString(dis);
					
					this.lst_nm = readString(dis);
					
					this.mid_nm = readString(dis);
					
					this.sfx_nm = readString(dis);
					
					this.brth_dt = readDate(dis);
					
					this.cr_rpt_auth_ind = readString(dis);
					
						this.depnt_ct = readInteger(dis);
					
					this.marr_stat_type_nm = readString(dis);
					
						this.cr_score_num = readInteger(dis);
					
					this.citzn_resd_type_nm = readString(dis);
					
					this.gndr_type_nm = readString(dis);
					
					this.resd_addr_line_txt = readString(dis);
					
					this.mail_addr_line_txt = readString(dis);
					
					this.mail_city_nm = readString(dis);
					
					this.mail_pstl_cd = readString(dis);
					
					this.mail_st_cd = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.txn_msg_id);
					
					// String
				
						writeString(this.brwr_class_type_nm,dos);
					
					// Integer
				
						writeInteger(this.brwr_id,dos);
					
					// String
				
						writeString(this.first_nm,dos);
					
					// String
				
						writeString(this.lst_nm,dos);
					
					// String
				
						writeString(this.mid_nm,dos);
					
					// String
				
						writeString(this.sfx_nm,dos);
					
					// java.util.Date
				
						writeDate(this.brth_dt,dos);
					
					// String
				
						writeString(this.cr_rpt_auth_ind,dos);
					
					// Integer
				
						writeInteger(this.depnt_ct,dos);
					
					// String
				
						writeString(this.marr_stat_type_nm,dos);
					
					// Integer
				
						writeInteger(this.cr_score_num,dos);
					
					// String
				
						writeString(this.citzn_resd_type_nm,dos);
					
					// String
				
						writeString(this.gndr_type_nm,dos);
					
					// String
				
						writeString(this.resd_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_addr_line_txt,dos);
					
					// String
				
						writeString(this.mail_city_nm,dos);
					
					// String
				
						writeString(this.mail_pstl_cd,dos);
					
					// String
				
						writeString(this.mail_st_cd,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("txn_msg_id="+String.valueOf(txn_msg_id));
		sb.append(",brwr_class_type_nm="+brwr_class_type_nm);
		sb.append(",brwr_id="+String.valueOf(brwr_id));
		sb.append(",first_nm="+first_nm);
		sb.append(",lst_nm="+lst_nm);
		sb.append(",mid_nm="+mid_nm);
		sb.append(",sfx_nm="+sfx_nm);
		sb.append(",brth_dt="+String.valueOf(brth_dt));
		sb.append(",cr_rpt_auth_ind="+cr_rpt_auth_ind);
		sb.append(",depnt_ct="+String.valueOf(depnt_ct));
		sb.append(",marr_stat_type_nm="+marr_stat_type_nm);
		sb.append(",cr_score_num="+String.valueOf(cr_score_num));
		sb.append(",citzn_resd_type_nm="+citzn_resd_type_nm);
		sb.append(",gndr_type_nm="+gndr_type_nm);
		sb.append(",resd_addr_line_txt="+resd_addr_line_txt);
		sb.append(",mail_addr_line_txt="+mail_addr_line_txt);
		sb.append(",mail_city_nm="+mail_city_nm);
		sb.append(",mail_pstl_cd="+mail_pstl_cd);
		sb.append(",mail_st_cd="+mail_st_cd);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				sb.append(txn_msg_id);
        			
        			sb.append("|");
        		
        				if(brwr_class_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_class_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brwr_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brwr_id);
            			}
            		
        			sb.append("|");
        		
        				if(first_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(first_nm);
            			}
            		
        			sb.append("|");
        		
        				if(lst_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(lst_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mid_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mid_nm);
            			}
            		
        			sb.append("|");
        		
        				if(sfx_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(sfx_nm);
            			}
            		
        			sb.append("|");
        		
        				if(brth_dt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(brth_dt);
            			}
            		
        			sb.append("|");
        		
        				if(cr_rpt_auth_ind == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_rpt_auth_ind);
            			}
            		
        			sb.append("|");
        		
        				if(depnt_ct == null){
        					sb.append("<null>");
        				}else{
            				sb.append(depnt_ct);
            			}
            		
        			sb.append("|");
        		
        				if(marr_stat_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(marr_stat_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(cr_score_num == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cr_score_num);
            			}
            		
        			sb.append("|");
        		
        				if(citzn_resd_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(citzn_resd_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(gndr_type_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(gndr_type_nm);
            			}
            		
        			sb.append("|");
        		
        				if(resd_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resd_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_addr_line_txt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_addr_line_txt);
            			}
            		
        			sb.append("|");
        		
        				if(mail_city_nm == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_city_nm);
            			}
            		
        			sb.append("|");
        		
        				if(mail_pstl_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_pstl_cd);
            			}
            		
        			sb.append("|");
        		
        				if(mail_st_cd == null){
        					sb.append("<null>");
        				}else{
            				sb.append(mail_st_cd);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public String payload;

				public String getPayload () {
					return this.payload;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
					this.payload = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.payload,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("payload="+payload);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(payload == null){
        					sb.append("<null>");
        				}else{
            				sb.append(payload);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public String payload;

				public String getPayload () {
					return this.payload;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
					this.payload = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.payload,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("payload="+payload);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(payload == null){
        					sb.append("<null>");
        				}else{
            				sb.append(payload);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tKafkaInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row1Struct row4 = row1;
row2Struct row2 = new row2Struct();
brwrStruct brwr = new brwrStruct();
row3Struct row3 = new row3Struct();








	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tLogRow_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_1 = new StringBuilder();
                    log4jParamters_tLogRow_1.append("Parameters:");
                            log4jParamters_tLogRow_1.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + (log4jParamters_tLogRow_1) );
                    } 
                } 
            new BytesLimit65535_tLogRow_1().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"brwr");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "MYSQL_8");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "\"mysql-svc.data-app-poc.svc.cluster.local\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "\"3306\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "\"datapoc\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "\"u_datapoc\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf("enc:routine.encryption.key.v1:2aARKgJLi4rOGd3+H5wTMD31c+jVxN/nC5jDwL28XUH6T9/L").substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"brwr\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "INSERT_OR_UPDATE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "\"\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_HINT_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tMysqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "brwr";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + "mysql-svc.data-app-poc.svc.cluster.local" + ":" + "3306" + "/" + "datapoc" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + "mysql-svc.data-app-poc.svc.cluster.local" + ":" + "3306" + "/" + "datapoc" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + (driverClass_tDBOutput_1)  + (".") );
		String dbUser_tDBOutput_1 = "u_datapoc";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:PSCTKyHLTO503mPpmm+Wf/8r2C5zfdhxBH0R+tNHfU6NoKll");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );

int count_tDBOutput_1=0;
    	
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM `" + "brwr" + "` WHERE `txn_msg_id` = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO `" + "brwr" + "` (`txn_msg_id`,`brwr_class_type_nm`,`brwr_id`,`first_nm`,`lst_nm`,`mid_nm`,`sfx_nm`,`brth_dt`,`cr_rpt_auth_ind`,`depnt_ct`,`marr_stat_type_nm`,`cr_score_num`,`citzn_resd_type_nm`,`gndr_type_nm`,`resd_addr_line_txt`,`mail_addr_line_txt`,`mail_city_nm`,`mail_pstl_cd`,`mail_st_cd`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE `" + "brwr" + "` SET `brwr_class_type_nm` = ?,`brwr_id` = ?,`first_nm` = ?,`lst_nm` = ?,`mid_nm` = ?,`sfx_nm` = ?,`brth_dt` = ?,`cr_rpt_auth_ind` = ?,`depnt_ct` = ?,`marr_stat_type_nm` = ?,`cr_score_num` = ?,`citzn_resd_type_nm` = ?,`gndr_type_nm` = ?,`resd_addr_line_txt` = ?,`mail_addr_line_txt` = ?,`mail_city_nm` = ?,`mail_pstl_cd` = ?,`mail_st_cd` = ? WHERE `txn_msg_id` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    
        StringBuffer query_tDBOutput_1 = null;
       	
			update_tDBOutput_1 += " ";
			String[] updateSQLSplits_tDBOutput_1 = update_tDBOutput_1.split("\\?");
			String[] insertSQLSplits_tDBOutput_1 = insert_tDBOutput_1.split("\\?");

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row2_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_brwr_tMap_1 = 0;
				
brwrStruct brwr_tmp = new brwrStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tExtractJSONFields_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tExtractJSONFields_1 = new StringBuilder();
                    log4jParamters_tExtractJSONFields_1.append("Parameters:");
                            log4jParamters_tExtractJSONFields_1.append("READ_BY" + " = " + "JSONPATH");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSON_PATH_VERSION" + " = " + "2_1_0");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSONFIELD" + " = " + "payload");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSON_LOOP_QUERY" + " = " + "\"$.customers\"");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("MAPPING_4_JSONPATH" + " = " + "[{QUERY="+("\"txn_msg_id\"")+", SCHEMA_COLUMN="+("txn_msg_id")+"}, {QUERY="+("\"brwr_class_type_nm\"")+", SCHEMA_COLUMN="+("brwr_class_type_nm")+"}, {QUERY="+("\"brwr_id\"")+", SCHEMA_COLUMN="+("brwr_id")+"}, {QUERY="+("\"first_nm\"")+", SCHEMA_COLUMN="+("first_nm")+"}, {QUERY="+("\"lst_nm\"")+", SCHEMA_COLUMN="+("lst_nm")+"}, {QUERY="+("\"mid_nm\"")+", SCHEMA_COLUMN="+("mid_nm")+"}, {QUERY="+("\"sfx_nm\"")+", SCHEMA_COLUMN="+("sfx_nm")+"}, {QUERY="+("\"brth_dt\"")+", SCHEMA_COLUMN="+("brth_dt")+"}, {QUERY="+("\"cr_rpt_auth_ind\"")+", SCHEMA_COLUMN="+("cr_rpt_auth_ind")+"}, {QUERY="+("\"depnt_ct\"")+", SCHEMA_COLUMN="+("depnt_ct")+"}, {QUERY="+("\"marr_stat_type_nm\"")+", SCHEMA_COLUMN="+("marr_stat_type_nm")+"}, {QUERY="+("\"cr_score_num\"")+", SCHEMA_COLUMN="+("cr_score_num")+"}, {QUERY="+("\"citzn_resd_type_nm\"")+", SCHEMA_COLUMN="+("citzn_resd_type_nm")+"}, {QUERY="+("\"gndr_type_nm\"")+", SCHEMA_COLUMN="+("gndr_type_nm")+"}, {QUERY="+("\"resd_addr_line_txt\"")+", SCHEMA_COLUMN="+("resd_addr_line_txt")+"}, {QUERY="+("\"mail_addr_line_txt\"")+", SCHEMA_COLUMN="+("mail_addr_line_txt")+"}, {QUERY="+("\"mail_city_nm\"")+", SCHEMA_COLUMN="+("mail_city_nm")+"}, {QUERY="+("\"mail_pstl_cd\"")+", SCHEMA_COLUMN="+("mail_pstl_cd")+"}, {QUERY="+("\"mail_st_cd\"")+", SCHEMA_COLUMN="+("mail_st_cd")+"}]");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("USE_LOOP_AS_ROOT" + " = " + "true");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + (log4jParamters_tExtractJSONFields_1) );
                    } 
                } 
            new BytesLimit65535_tExtractJSONFields_1().limitLog4jByte();
            }

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tLogRow_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_2 = new StringBuilder();
                    log4jParamters_tLogRow_2.append("Parameters:");
                            log4jParamters_tLogRow_2.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + (log4jParamters_tLogRow_2) );
                    } 
                } 
            new BytesLimit65535_tLogRow_2().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tKafkaInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tKafkaInput_1", false);
		start_Hash.put("tKafkaInput_1", System.currentTimeMillis());
		
	
	currentComponent="tKafkaInput_1";

	
		int tos_count_tKafkaInput_1 = 0;
		



	


class tKafkaInput_1_ValueDeserializer implements org.apache.kafka.common.serialization.Deserializer<row1Struct> {

	private org.apache.kafka.common.serialization.StringDeserializer stringDeserializer;

	public void configure(java.util.Map<java.lang.String,?> configs, boolean isKey) {
		stringDeserializer = new org.apache.kafka.common.serialization.StringDeserializer();
		stringDeserializer.configure(configs, isKey);
	}

	public row1Struct deserialize(String topic, byte[] data) {
		row1Struct result = new row1Struct();
		    String line = stringDeserializer.deserialize(topic, data);
		    result.payload = line;
		return result;
    }

	public void close() {
		// nothing
	}
}

class tKafkaInput_1_KeyDeserializer implements org.apache.kafka.common.serialization.Deserializer<byte[]> {

	public void configure(java.util.Map<java.lang.String,?> configs, boolean isKey) {
		// nothing
	}

	public byte[] deserialize(String topic, byte[] data) {
	    return data;
	}

	public void close() {
		// nothing
	}
}

// Consumer configuration
java.util.Properties tKafkaInput_1_kafkaProperties = new java.util.Properties();
    tKafkaInput_1_kafkaProperties.put("auto.commit.interval.ms", "5000");
    tKafkaInput_1_kafkaProperties.put("auto.offset.reset", "earliest");
    tKafkaInput_1_kafkaProperties.put("bootstrap.servers", "ent-kafka-dev.wellsfargo.com:49092");
    tKafkaInput_1_kafkaProperties.put("enable.auto.commit", "true");
    tKafkaInput_1_kafkaProperties.put("group.id", "mygroup");
    tKafkaInput_1_kafkaProperties.put("security.protocol", "PLAINTEXT");

// Value deserializer configuration
tKafkaInput_1_ValueDeserializer instance_tKafkaInput_1_ValueDeserializer = new tKafkaInput_1_ValueDeserializer();
java.util.Map<String, String> instance_tKafkaInput_1_ValueDeserializer_configs = new java.util.HashMap<String, String>();
instance_tKafkaInput_1_ValueDeserializer_configs.put("serializer.encoding", "UTF-8");
instance_tKafkaInput_1_ValueDeserializer.configure(instance_tKafkaInput_1_ValueDeserializer_configs, false);

// Single-threaded consumer. Make sure the new security information is picked up.
javax.security.auth.login.Configuration.setConfiguration(null);
org.apache.kafka.clients.consumer.KafkaConsumer<byte[], row1Struct> tKafkaInput_1_kafkaConsumer = new org.apache.kafka.clients.consumer.KafkaConsumer<byte[], row1Struct>(tKafkaInput_1_kafkaProperties, new tKafkaInput_1_KeyDeserializer(), instance_tKafkaInput_1_ValueDeserializer);
tKafkaInput_1_kafkaConsumer.subscribe(java.util.Arrays.asList("Talend123poc"));

globalMap.put("tKafkaInput_1_kafkaConsumer", tKafkaInput_1_kafkaConsumer);

    // Stop processing messages if the job has passed this time.
	 long initialTime_tKafkaInput_1 = System.currentTimeMillis();
    long maxDurationDeadline_tKafkaInput_1 = System.currentTimeMillis() + 600000;

// Start consumption
while (true) {
	try {
			// Poll timeout has to be recomputed for every single poll
			long tKafkaInput_1_timeout = maxDurationDeadline_tKafkaInput_1 - System.currentTimeMillis();
			if(tKafkaInput_1_timeout < 0) {
				break;
			}
			org.apache.kafka.clients.consumer.ConsumerRecords<byte[], row1Struct> tKafkaInput_1_consumerRecords = tKafkaInput_1_kafkaConsumer.poll(tKafkaInput_1_timeout);
		if(tKafkaInput_1_consumerRecords == null) {
			// Dummy condition to make sure we have a way to break the current loop, regardless of the tKafkaInput configuration (compilation matter).
			break;
		}

		for(org.apache.kafka.clients.consumer.ConsumerRecord<byte[], row1Struct> tKafkaInput_1_consumerRecord : tKafkaInput_1_consumerRecords) {

 



/**
 * [tKafkaInput_1 begin ] stop
 */
	
	/**
	 * [tKafkaInput_1 main ] start
	 */

	

	
	
	currentComponent="tKafkaInput_1";

	



	


row1 = tKafkaInput_1_consumerRecord.value() == null ? new row1Struct() : tKafkaInput_1_consumerRecord.value();
 


	tos_count_tKafkaInput_1++;

/**
 * [tKafkaInput_1 main ] stop
 */
	
	/**
	 * [tKafkaInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tKafkaInput_1";

	

 



/**
 * [tKafkaInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row1.payload != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row1.payload)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    	log.info("tLogRow_2 - Content of row "+(nb_line_tLogRow_2+1)+": " + strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = row1;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

            if(row4.payload!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row4.payload.toString();
   
row2 = null;

	

String loopPath_tExtractJSONFields_1 = "$.customers";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		log.error("tExtractJSONFields_1 - " + ex_tExtractJSONFields_1.getMessage());
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row2 = null;
	row2 = new row2Struct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "txn_msg_id";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					row2.txn_msg_id = ParserUtils.parseTo_int(value_tExtractJSONFields_1.toString());
				} else {
					row2.txn_msg_id = 

		0

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.txn_msg_id = 

		0

;
		}
		jsonPath_tExtractJSONFields_1 = "brwr_class_type_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.brwr_class_type_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.brwr_class_type_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "brwr_id";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					row2.brwr_id = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					row2.brwr_id = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.brwr_id = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "first_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.first_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.first_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "lst_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.lst_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.lst_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "mid_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.mid_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.mid_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "sfx_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.sfx_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.sfx_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "brth_dt";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					row2.brth_dt = ParserUtils.parseTo_Date(value_tExtractJSONFields_1.toString(), "dd-MM-yyyy");
				} else {
					row2.brth_dt = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.brth_dt = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "cr_rpt_auth_ind";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.cr_rpt_auth_ind = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.cr_rpt_auth_ind = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "depnt_ct";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					row2.depnt_ct = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					row2.depnt_ct = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.depnt_ct = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "marr_stat_type_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.marr_stat_type_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.marr_stat_type_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "cr_score_num";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				if(value_tExtractJSONFields_1 != null && !value_tExtractJSONFields_1.toString().isEmpty()) {
					row2.cr_score_num = ParserUtils.parseTo_Integer(value_tExtractJSONFields_1.toString());
				} else {
					row2.cr_score_num = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.cr_score_num = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "citzn_resd_type_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.citzn_resd_type_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.citzn_resd_type_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "gndr_type_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.gndr_type_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.gndr_type_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "resd_addr_line_txt";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.resd_addr_line_txt = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.resd_addr_line_txt = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "mail_addr_line_txt";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.mail_addr_line_txt = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.mail_addr_line_txt = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "mail_city_nm";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.mail_city_nm = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.mail_city_nm = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "mail_pstl_cd";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.mail_pstl_cd = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.mail_pstl_cd = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "mail_st_cd";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.mail_st_cd = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row2.mail_st_cd = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
			log.error("tExtractJSONFields_1 - " + ex_tExtractJSONFields_1.getMessage());
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row2 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
	log.debug("tExtractJSONFields_1 - Extracting the record " + nb_line_tExtractJSONFields_1 + ".");
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

brwr = null;


// # Output table : 'brwr'
count_brwr_tMap_1++;

brwr_tmp.txn_msg_id = row2.txn_msg_id ;
brwr_tmp.brwr_class_type_nm = row2.brwr_class_type_nm ;
brwr_tmp.brwr_id = row2.brwr_id ;
brwr_tmp.first_nm = row2.first_nm ;
brwr_tmp.lst_nm = row2.lst_nm;
brwr_tmp.mid_nm = row2.mid_nm ;
brwr_tmp.sfx_nm = row2.sfx_nm;
brwr_tmp.brth_dt = row2.brth_dt;
brwr_tmp.cr_rpt_auth_ind = row2.cr_rpt_auth_ind;
brwr_tmp.depnt_ct = row2.depnt_ct;
brwr_tmp.marr_stat_type_nm = row2.marr_stat_type_nm;
brwr_tmp.cr_score_num = row2.cr_score_num;
brwr_tmp.citzn_resd_type_nm = row2.citzn_resd_type_nm;
brwr_tmp.gndr_type_nm = row2.gndr_type_nm;
brwr_tmp.resd_addr_line_txt = row2.resd_addr_line_txt;
brwr_tmp.mail_addr_line_txt = row2.mail_addr_line_txt;
brwr_tmp.mail_city_nm = row2.mail_city_nm;
brwr_tmp.mail_pstl_cd = row2.mail_pstl_cd;
brwr_tmp.mail_st_cd = row2.mail_st_cd;
brwr = brwr_tmp;
log.debug("tMap_1 - Outputting the record " + count_brwr_tMap_1 + " of the output table 'brwr'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "brwr"
if(brwr != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"brwr");
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("brwr - " + (brwr==null? "": brwr.toLogString()));
    			}
    		



            row3 = null;
        query_tDBOutput_1 = new StringBuffer("");
        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, brwr.txn_msg_id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(brwr.brwr_class_type_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, brwr.brwr_class_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(updateSQLSplits_tDBOutput_1[0]).append(brwr.brwr_class_type_nm== null ?  "null" :"'" + brwr.brwr_class_type_nm + "'").append(updateSQLSplits_tDBOutput_1[1]);
                        if(brwr.brwr_id == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(2, brwr.brwr_id);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.brwr_id== null ?  "null" :String.valueOf(brwr.brwr_id)).append(updateSQLSplits_tDBOutput_1[2]);
                        if(brwr.first_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, brwr.first_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.first_nm== null ?  "null" :"'" + brwr.first_nm + "'").append(updateSQLSplits_tDBOutput_1[3]);
                        if(brwr.lst_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, brwr.lst_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.lst_nm== null ?  "null" :"'" + brwr.lst_nm + "'").append(updateSQLSplits_tDBOutput_1[4]);
                        if(brwr.mid_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, brwr.mid_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mid_nm== null ?  "null" :"'" + brwr.mid_nm + "'").append(updateSQLSplits_tDBOutput_1[5]);
                        if(brwr.sfx_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, brwr.sfx_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.sfx_nm== null ?  "null" :"'" + brwr.sfx_nm + "'").append(updateSQLSplits_tDBOutput_1[6]);
                        if(brwr.brth_dt != null) {
date_tDBOutput_1 = brwr.brth_dt.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmtUpdate_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
} else {pstmtUpdate_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.DATE);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.brth_dt== null ?  "null" :"'" + new java.text.SimpleDateFormat("dd-MM-yyyy").format(brwr.brth_dt) + "'").append(updateSQLSplits_tDBOutput_1[7]);
                        if(brwr.cr_rpt_auth_ind == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, brwr.cr_rpt_auth_ind);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.cr_rpt_auth_ind== null ?  "null" :"'" + brwr.cr_rpt_auth_ind + "'").append(updateSQLSplits_tDBOutput_1[8]);
                        if(brwr.depnt_ct == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(9, brwr.depnt_ct);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.depnt_ct== null ?  "null" :String.valueOf(brwr.depnt_ct)).append(updateSQLSplits_tDBOutput_1[9]);
                        if(brwr.marr_stat_type_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, brwr.marr_stat_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.marr_stat_type_nm== null ?  "null" :"'" + brwr.marr_stat_type_nm + "'").append(updateSQLSplits_tDBOutput_1[10]);
                        if(brwr.cr_score_num == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(11, brwr.cr_score_num);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.cr_score_num== null ?  "null" :String.valueOf(brwr.cr_score_num)).append(updateSQLSplits_tDBOutput_1[11]);
                        if(brwr.citzn_resd_type_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, brwr.citzn_resd_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.citzn_resd_type_nm== null ?  "null" :"'" + brwr.citzn_resd_type_nm + "'").append(updateSQLSplits_tDBOutput_1[12]);
                        if(brwr.gndr_type_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, brwr.gndr_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.gndr_type_nm== null ?  "null" :"'" + brwr.gndr_type_nm + "'").append(updateSQLSplits_tDBOutput_1[13]);
                        if(brwr.resd_addr_line_txt == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14, brwr.resd_addr_line_txt);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.resd_addr_line_txt== null ?  "null" :"'" + brwr.resd_addr_line_txt + "'").append(updateSQLSplits_tDBOutput_1[14]);
                        if(brwr.mail_addr_line_txt == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, brwr.mail_addr_line_txt);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_addr_line_txt== null ?  "null" :"'" + brwr.mail_addr_line_txt + "'").append(updateSQLSplits_tDBOutput_1[15]);
                        if(brwr.mail_city_nm == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(16, brwr.mail_city_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_city_nm== null ?  "null" :"'" + brwr.mail_city_nm + "'").append(updateSQLSplits_tDBOutput_1[16]);
                        if(brwr.mail_pstl_cd == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(17, brwr.mail_pstl_cd);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_pstl_cd== null ?  "null" :"'" + brwr.mail_pstl_cd + "'").append(updateSQLSplits_tDBOutput_1[17]);
                        if(brwr.mail_st_cd == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(18, brwr.mail_st_cd);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_st_cd== null ?  "null" :"'" + brwr.mail_st_cd + "'").append(updateSQLSplits_tDBOutput_1[18]);
                        pstmtUpdate_tDBOutput_1.setInt(19 + count_tDBOutput_1, brwr.txn_msg_id);

                                query_tDBOutput_1 = query_tDBOutput_1.append(String.valueOf(brwr.txn_msg_id)).append(updateSQLSplits_tDBOutput_1[19]);
                    globalMap.put("tDBOutput_1_QUERY", query_tDBOutput_1.toString().trim());
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("'")  + (globalMap.get("tDBOutput_1_QUERY"))  + ("'.") );
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Updating")  + (" the record ")  + (nb_line_tDBOutput_1)  + (".") );
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        throw(e);
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, brwr.txn_msg_id);

                            query_tDBOutput_1 = query_tDBOutput_1.append(insertSQLSplits_tDBOutput_1[0]).append(String.valueOf(brwr.txn_msg_id)).append(insertSQLSplits_tDBOutput_1[1]);
                        if(brwr.brwr_class_type_nm == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, brwr.brwr_class_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.brwr_class_type_nm== null ?  "null" :"'" + brwr.brwr_class_type_nm + "'").append(insertSQLSplits_tDBOutput_1[2]);
                        if(brwr.brwr_id == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(3, brwr.brwr_id);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.brwr_id== null ?  "null" :String.valueOf(brwr.brwr_id)).append(insertSQLSplits_tDBOutput_1[3]);
                        if(brwr.first_nm == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, brwr.first_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.first_nm== null ?  "null" :"'" + brwr.first_nm + "'").append(insertSQLSplits_tDBOutput_1[4]);
                        if(brwr.lst_nm == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, brwr.lst_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.lst_nm== null ?  "null" :"'" + brwr.lst_nm + "'").append(insertSQLSplits_tDBOutput_1[5]);
                        if(brwr.mid_nm == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, brwr.mid_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mid_nm== null ?  "null" :"'" + brwr.mid_nm + "'").append(insertSQLSplits_tDBOutput_1[6]);
                        if(brwr.sfx_nm == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, brwr.sfx_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.sfx_nm== null ?  "null" :"'" + brwr.sfx_nm + "'").append(insertSQLSplits_tDBOutput_1[7]);
                        if(brwr.brth_dt != null) {
date_tDBOutput_1 = brwr.brth_dt.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmtInsert_tDBOutput_1.setString(8, "0000-00-00 00:00:00");
} else {pstmtInsert_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.DATE);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.brth_dt== null ?  "null" :"'" + new java.text.SimpleDateFormat("dd-MM-yyyy").format(brwr.brth_dt) + "'").append(insertSQLSplits_tDBOutput_1[8]);
                        if(brwr.cr_rpt_auth_ind == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, brwr.cr_rpt_auth_ind);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.cr_rpt_auth_ind== null ?  "null" :"'" + brwr.cr_rpt_auth_ind + "'").append(insertSQLSplits_tDBOutput_1[9]);
                        if(brwr.depnt_ct == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(10, brwr.depnt_ct);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.depnt_ct== null ?  "null" :String.valueOf(brwr.depnt_ct)).append(insertSQLSplits_tDBOutput_1[10]);
                        if(brwr.marr_stat_type_nm == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, brwr.marr_stat_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.marr_stat_type_nm== null ?  "null" :"'" + brwr.marr_stat_type_nm + "'").append(insertSQLSplits_tDBOutput_1[11]);
                        if(brwr.cr_score_num == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(12, brwr.cr_score_num);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.cr_score_num== null ?  "null" :String.valueOf(brwr.cr_score_num)).append(insertSQLSplits_tDBOutput_1[12]);
                        if(brwr.citzn_resd_type_nm == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, brwr.citzn_resd_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.citzn_resd_type_nm== null ?  "null" :"'" + brwr.citzn_resd_type_nm + "'").append(insertSQLSplits_tDBOutput_1[13]);
                        if(brwr.gndr_type_nm == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(14, brwr.gndr_type_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.gndr_type_nm== null ?  "null" :"'" + brwr.gndr_type_nm + "'").append(insertSQLSplits_tDBOutput_1[14]);
                        if(brwr.resd_addr_line_txt == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, brwr.resd_addr_line_txt);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.resd_addr_line_txt== null ?  "null" :"'" + brwr.resd_addr_line_txt + "'").append(insertSQLSplits_tDBOutput_1[15]);
                        if(brwr.mail_addr_line_txt == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(16, brwr.mail_addr_line_txt);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_addr_line_txt== null ?  "null" :"'" + brwr.mail_addr_line_txt + "'").append(insertSQLSplits_tDBOutput_1[16]);
                        if(brwr.mail_city_nm == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(17, brwr.mail_city_nm);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_city_nm== null ?  "null" :"'" + brwr.mail_city_nm + "'").append(insertSQLSplits_tDBOutput_1[17]);
                        if(brwr.mail_pstl_cd == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(18, brwr.mail_pstl_cd);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_pstl_cd== null ?  "null" :"'" + brwr.mail_pstl_cd + "'").append(insertSQLSplits_tDBOutput_1[18]);
                        if(brwr.mail_st_cd == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, brwr.mail_st_cd);
}

                            query_tDBOutput_1 = query_tDBOutput_1.append(brwr.mail_st_cd== null ?  "null" :"'" + brwr.mail_st_cd + "'").append(insertSQLSplits_tDBOutput_1[19]);
                    globalMap.put("tDBOutput_1_QUERY", query_tDBOutput_1.toString().trim());
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("'")  + (globalMap.get("tDBOutput_1_QUERY"))  + ("'.") );
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Inserting")  + (" the record ")  + (nb_line_tDBOutput_1)  + (".") );
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        throw(e);
                }
            }
            if(!whetherReject_tDBOutput_1) {
                            row3 = new row3Struct();
                                row3.txn_msg_id = brwr.txn_msg_id;
                                row3.brwr_class_type_nm = brwr.brwr_class_type_nm;
                                row3.brwr_id = brwr.brwr_id;
                                row3.first_nm = brwr.first_nm;
                                row3.lst_nm = brwr.lst_nm;
                                row3.mid_nm = brwr.mid_nm;
                                row3.sfx_nm = brwr.sfx_nm;
                                row3.brth_dt = brwr.brth_dt;
                                row3.cr_rpt_auth_ind = brwr.cr_rpt_auth_ind;
                                row3.depnt_ct = brwr.depnt_ct;
                                row3.marr_stat_type_nm = brwr.marr_stat_type_nm;
                                row3.cr_score_num = brwr.cr_score_num;
                                row3.citzn_resd_type_nm = brwr.citzn_resd_type_nm;
                                row3.gndr_type_nm = brwr.gndr_type_nm;
                                row3.resd_addr_line_txt = brwr.resd_addr_line_txt;
                                row3.mail_addr_line_txt = brwr.mail_addr_line_txt;
                                row3.mail_city_nm = brwr.mail_city_nm;
                                row3.mail_pstl_cd = brwr.mail_pstl_cd;
                                row3.mail_st_cd = brwr.mail_st_cd;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (commitCounter_tDBOutput_1)  + (" record(s).") );
                    conn_tDBOutput_1.commit();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3 - " + (row3==null? "": row3.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.txn_msg_id)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.brwr_class_type_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.brwr_class_type_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.brwr_id != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.brwr_id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.first_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.first_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.lst_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.lst_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.mid_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.mid_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.sfx_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.sfx_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.brth_dt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row3.brth_dt, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.cr_rpt_auth_ind != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.cr_rpt_auth_ind)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.depnt_ct != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.depnt_ct)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.marr_stat_type_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.marr_stat_type_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.cr_score_num != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.cr_score_num)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.citzn_resd_type_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.citzn_resd_type_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.gndr_type_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.gndr_type_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.resd_addr_line_txt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.resd_addr_line_txt)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.mail_addr_line_txt != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.mail_addr_line_txt)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.mail_city_nm != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.mail_city_nm)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.mail_pstl_cd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.mail_pstl_cd)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row3.mail_st_cd != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row3.mail_st_cd)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    	log.info("tLogRow_1 - Content of row "+(nb_line_tLogRow_1+1)+": " + strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "brwr"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tKafkaInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tKafkaInput_1";

	

 



/**
 * [tKafkaInput_1 process_data_end ] stop
 */
	
	/**
	 * [tKafkaInput_1 end ] start
	 */

	

	
	
	currentComponent="tKafkaInput_1";

	



	
		} // end for ConsumerRecord
    // Immediately stop processing messagesDeadline if the max duration deadline has passed.
    if (System.currentTimeMillis() > maxDurationDeadline_tKafkaInput_1)
        break;
    } catch (org.apache.kafka.common.errors.AuthenticationException|org.apache.kafka.common.errors.AuthorizationException|org.apache.kafka.common.errors.UnknownServerException|org.apache.kafka.common.errors.UnsupportedVersionException e) {
    	// the process stops when there is AuthenticationException, AuthorizationException, UnknownServerException or UnsupportedVersionException
		throw e;
	} catch (org.apache.kafka.common.KafkaException e) {
			
			log.error("tKafkaInput_1 - " + e.getMessage());
		
		break;
	}
} // end while(true)

 

ok_Hash.put("tKafkaInput_1", true);
end_Hash.put("tKafkaInput_1", System.currentTimeMillis());




/**
 * [tKafkaInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);
                if(log.isInfoEnabled())
            log.info("tLogRow_2 - "  + ("Printed row count: ")  + (nb_line_tLogRow_2)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Done.") );

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);
	log.debug("tExtractJSONFields_1 - Extracted records count: " + nb_line_tExtractJSONFields_1 + " .");


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + ("Done.") );

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'brwr': " + count_brwr_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (commitCounter_tDBOutput_1)  + (" record(s).") );
    		conn_tDBOutput_1.commit();
    		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
    	}
    		
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_1)  + (" record(s).") );
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_1)  + (" record(s).") );

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"brwr");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);
                if(log.isInfoEnabled())
            log.info("tLogRow_1 - "  + ("Printed row count: ")  + (nb_line_tLogRow_1)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + ("Done.") );

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tKafkaInput_1 finally ] start
	 */

	

	
	
	currentComponent="tKafkaInput_1";

	

 



/**
 * [tKafkaInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendStats_STATSStruct implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendStats_STATSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();




	
	/**
	 * [talendStats_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_CONSOLE", false);
		start_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendStats_CONSOLE = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendStats_CONSOLE - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendStats_CONSOLE{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendStats_CONSOLE = new StringBuilder();
                    log4jParamters_talendStats_CONSOLE.append("Parameters:");
                            log4jParamters_talendStats_CONSOLE.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("VERTICAL" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                            log4jParamters_talendStats_CONSOLE.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_talendStats_CONSOLE.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendStats_CONSOLE - "  + (log4jParamters_talendStats_CONSOLE) );
                    } 
                } 
            new BytesLimit65535_talendStats_CONSOLE().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendStats_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendStats_CONSOLE = null;	

 		StringBuilder strBuffer_talendStats_CONSOLE = null;
		int nb_line_talendStats_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendStats_CONSOLE begin ] stop
 */



	
	/**
	 * [talendStats_STATS begin ] start
	 */

	

	
		
		ok_Hash.put("talendStats_STATS", false);
		start_Hash.put("talendStats_STATS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	
		int tos_count_talendStats_STATS = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendStats_STATS{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendStats_STATS = new StringBuilder();
                    log4jParamters_talendStats_STATS.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + (log4jParamters_talendStats_STATS) );
                    } 
                } 
            new BytesLimit65535_talendStats_STATS().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
		row_talendStats_STATS.pid = pid;
		row_talendStats_STATS.root_pid = rootPid;
		row_talendStats_STATS.father_pid = fatherPid;	
    	row_talendStats_STATS.project = projectName;
    	row_talendStats_STATS.job = jobName;
    	row_talendStats_STATS.context = contextStr;
		row_talendStats_STATS.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row_talendStats_STATS.message = scm.getMessage();
		row_talendStats_STATS.duration = scm.getDuration();
		row_talendStats_STATS.moment = scm.getMoment();
		row_talendStats_STATS.message_type = scm.getMessageType();
		row_talendStats_STATS.job_version = scm.getJobVersion();
		row_talendStats_STATS.job_repository_id = scm.getJobId();
		row_talendStats_STATS.system_pid = scm.getSystemPid();

 



/**
 * [talendStats_STATS begin ] stop
 */
	
	/**
	 * [talendStats_STATS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 


	tos_count_talendStats_STATS++;

/**
 * [talendStats_STATS main ] stop
 */
	
	/**
	 * [talendStats_STATS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_begin ] stop
 */

	
	/**
	 * [talendStats_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendStats_CONSOLE = new StringBuilder();




   				
	    		if(row_talendStats_STATS.moment != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
								FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.father_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.root_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.system_pid != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.project != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.project)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.job != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.job)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.job_repository_id != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.job_version != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.context != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.context)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.origin != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.origin)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.message_type != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.message_type)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.message != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.message)							
				);


							
	    		} //  			

    			strBuffer_talendStats_CONSOLE.append("|");
    			


   				
	    		if(row_talendStats_STATS.duration != null) { //              
                    							
       
				strBuffer_talendStats_CONSOLE.append(
				                String.valueOf(row_talendStats_STATS.duration)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendStats_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendStats_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendStats_CONSOLE);
                    }
                    	log.info("talendStats_CONSOLE - Content of row "+(nb_line_talendStats_CONSOLE+1)+": " + strBuffer_talendStats_CONSOLE.toString());
                    consoleOut_talendStats_CONSOLE.println(strBuffer_talendStats_CONSOLE.toString());
                    consoleOut_talendStats_CONSOLE.flush();
                    nb_line_talendStats_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendStats_CONSOLE++;

/**
 * [talendStats_CONSOLE main ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendStats_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendStats_STATS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS process_data_end ] stop
 */
	
	/**
	 * [talendStats_STATS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("talendStats_STATS - "  + ("Done.") );

ok_Hash.put("talendStats_STATS", true);
end_Hash.put("talendStats_STATS", System.currentTimeMillis());




/**
 * [talendStats_STATS end ] stop
 */

	
	/**
	 * [talendStats_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	


//////
//////
globalMap.put("talendStats_CONSOLE_NB_LINE",nb_line_talendStats_CONSOLE);
                if(log.isInfoEnabled())
            log.info("talendStats_CONSOLE - "  + ("Printed row count: ")  + (nb_line_talendStats_CONSOLE)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendStats_CONSOLE - "  + ("Done.") );

ok_Hash.put("talendStats_CONSOLE", true);
end_Hash.put("talendStats_CONSOLE", System.currentTimeMillis());




/**
 * [talendStats_CONSOLE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendStats_STATS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_STATS";
	
	currentComponent="talendStats_STATS";

	

 



/**
 * [talendStats_STATS finally ] stop
 */

	
	/**
	 * [talendStats_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendStats_CONSOLE";
	
	currentComponent="talendStats_CONSOLE";

	

 



/**
 * [talendStats_CONSOLE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_CONSOLE", false);
		start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_CONSOLE = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendLogs_CONSOLE - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendLogs_CONSOLE{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendLogs_CONSOLE = new StringBuilder();
                    log4jParamters_talendLogs_CONSOLE.append("Parameters:");
                            log4jParamters_talendLogs_CONSOLE.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("VERTICAL" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                            log4jParamters_talendLogs_CONSOLE.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_talendLogs_CONSOLE.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendLogs_CONSOLE - "  + (log4jParamters_talendLogs_CONSOLE) );
                    } 
                } 
            new BytesLimit65535_talendLogs_CONSOLE().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;	

 		StringBuilder strBuffer_talendLogs_CONSOLE = null;
		int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendLogs_CONSOLE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendLogs_LOGS{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendLogs_LOGS = new StringBuilder();
                    log4jParamters_talendLogs_LOGS.append("Parameters:");
                            log4jParamters_talendLogs_LOGS.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                            log4jParamters_talendLogs_LOGS.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                            log4jParamters_talendLogs_LOGS.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_talendLogs_LOGS.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + (log4jParamters_talendLogs_LOGS) );
                    } 
                } 
            new BytesLimit65535_talendLogs_LOGS().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendLogs_CONSOLE = new StringBuilder();




   				
	    		if(row_talendLogs_LOGS.moment != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
								FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.root_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.father_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.project != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.project)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.job != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.job)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.context != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.context)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.priority != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.priority)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.type != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.type)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.origin != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.origin)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.message != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.message)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.code != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendLogs_CONSOLE);
                    }
                    	log.info("talendLogs_CONSOLE - Content of row "+(nb_line_talendLogs_CONSOLE+1)+": " + strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.flush();
                    nb_line_talendLogs_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendLogs_CONSOLE++;

/**
 * [talendLogs_CONSOLE main ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 
                if(log.isDebugEnabled())
            log.debug("talendLogs_LOGS - "  + ("Done.") );

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	


//////
//////
globalMap.put("talendLogs_CONSOLE_NB_LINE",nb_line_talendLogs_CONSOLE);
                if(log.isInfoEnabled())
            log.info("talendLogs_CONSOLE - "  + ("Printed row count: ")  + (nb_line_talendLogs_CONSOLE)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendLogs_CONSOLE - "  + ("Done.") );

ok_Hash.put("talendLogs_CONSOLE", true);
end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());




/**
 * [talendLogs_CONSOLE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendMeter_METTERStruct implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_talend_app_poc = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_talend_app_poc.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_talend_app_poc.length == 0) {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_talend_app_poc = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_talend_app_poc, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_talend_app_poc) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row_talendMeter_METTERStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();




	
	/**
	 * [talendMeter_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_CONSOLE", false);
		start_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendMeter_CONSOLE = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendMeter_CONSOLE - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendMeter_CONSOLE{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendMeter_CONSOLE = new StringBuilder();
                    log4jParamters_talendMeter_CONSOLE.append("Parameters:");
                            log4jParamters_talendMeter_CONSOLE.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("VERTICAL" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                            log4jParamters_talendMeter_CONSOLE.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_talendMeter_CONSOLE.append(" | ");
                if(log.isDebugEnabled())
            log.debug("talendMeter_CONSOLE - "  + (log4jParamters_talendMeter_CONSOLE) );
                    } 
                } 
            new BytesLimit65535_talendMeter_CONSOLE().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendMeter_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendMeter_CONSOLE = null;	

 		StringBuilder strBuffer_talendMeter_CONSOLE = null;
		int nb_line_talendMeter_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendMeter_CONSOLE begin ] stop
 */



	
	/**
	 * [talendMeter_METTER begin ] start
	 */

	

	
		
		ok_Hash.put("talendMeter_METTER", false);
		start_Hash.put("talendMeter_METTER", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	
		int tos_count_talendMeter_METTER = 0;
		
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_talendMeter_METTER{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_talendMeter_METTER = new StringBuilder();
                    log4jParamters_talendMeter_METTER.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + (log4jParamters_talendMeter_METTER) );
                    } 
                } 
            new BytesLimit65535_talendMeter_METTER().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
		row_talendMeter_METTER.pid = pid;
		row_talendMeter_METTER.root_pid = rootPid;
		row_talendMeter_METTER.father_pid = fatherPid;	
        row_talendMeter_METTER.project = projectName;
        row_talendMeter_METTER.job = jobName;
        row_talendMeter_METTER.context = contextStr;
		row_talendMeter_METTER.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row_talendMeter_METTER.moment = mcm.getMoment();
		row_talendMeter_METTER.job_version = mcm.getJobVersion();
		row_talendMeter_METTER.job_repository_id = mcm.getJobId();
		row_talendMeter_METTER.system_pid = mcm.getSystemPid();
		row_talendMeter_METTER.label = mcm.getLabel();
		row_talendMeter_METTER.count = mcm.getCount();
		row_talendMeter_METTER.reference = talendMeter_METTER.getConnLinesCount(mcm.getReferense()+"_count");
		row_talendMeter_METTER.thresholds = mcm.getThresholds();
		

 



/**
 * [talendMeter_METTER begin ] stop
 */
	
	/**
	 * [talendMeter_METTER main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 


	tos_count_talendMeter_METTER++;

/**
 * [talendMeter_METTER main ] stop
 */
	
	/**
	 * [talendMeter_METTER process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_begin ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					
///////////////////////		
						



				strBuffer_talendMeter_CONSOLE = new StringBuilder();




   				
	    		if(row_talendMeter_METTER.moment != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
								FormatterUtils.format_Date(row_talendMeter_METTER.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.father_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.root_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.system_pid != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.system_pid)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.project != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.project)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.job != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.job)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.job_repository_id != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.job_repository_id)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.job_version != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.job_version)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.context != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.context)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.origin != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.origin)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.label != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.label)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.count != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.count)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.reference != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.reference)							
				);


							
	    		} //  			

    			strBuffer_talendMeter_CONSOLE.append("|");
    			


   				
	    		if(row_talendMeter_METTER.thresholds != null) { //              
                    							
       
				strBuffer_talendMeter_CONSOLE.append(
				                String.valueOf(row_talendMeter_METTER.thresholds)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendMeter_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendMeter_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendMeter_CONSOLE);
                    }
                    	log.info("talendMeter_CONSOLE - Content of row "+(nb_line_talendMeter_CONSOLE+1)+": " + strBuffer_talendMeter_CONSOLE.toString());
                    consoleOut_talendMeter_CONSOLE.println(strBuffer_talendMeter_CONSOLE.toString());
                    consoleOut_talendMeter_CONSOLE.flush();
                    nb_line_talendMeter_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendMeter_CONSOLE++;

/**
 * [talendMeter_CONSOLE main ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendMeter_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendMeter_METTER process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER process_data_end ] stop
 */
	
	/**
	 * [talendMeter_METTER end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("talendMeter_METTER - "  + ("Done.") );

ok_Hash.put("talendMeter_METTER", true);
end_Hash.put("talendMeter_METTER", System.currentTimeMillis());




/**
 * [talendMeter_METTER end ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	


//////
//////
globalMap.put("talendMeter_CONSOLE_NB_LINE",nb_line_talendMeter_CONSOLE);
                if(log.isInfoEnabled())
            log.info("talendMeter_CONSOLE - "  + ("Printed row count: ")  + (nb_line_talendMeter_CONSOLE)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("talendMeter_CONSOLE - "  + ("Done.") );

ok_Hash.put("talendMeter_CONSOLE", true);
end_Hash.put("talendMeter_CONSOLE", System.currentTimeMillis());




/**
 * [talendMeter_CONSOLE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendMeter_METTER finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_METTER";
	
	currentComponent="talendMeter_METTER";

	

 



/**
 * [talendMeter_METTER finally ] stop
 */

	
	/**
	 * [talendMeter_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendMeter_CONSOLE";
	
	currentComponent="talendMeter_CONSOLE";

	

 



/**
 * [talendMeter_CONSOLE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final talend_app_poc talend_app_pocClass = new talend_app_poc();

        int exitCode = talend_app_pocClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'talend_app_poc' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'talend_app_poc' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = talend_app_poc.class.getClassLoader().getResourceAsStream("local_project/talend_app_poc_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = talend_app_poc.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        talendStats_STATS.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob



        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tKafkaInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tKafkaInput_1) {
globalMap.put("tKafkaInput_1_SUBPROCESS_STATE", -1);

e_tKafkaInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : talend_app_poc");
        }
        talendStats_STATS.addMessage(status==""?"end":status, (end-startTime));
        try {
            talendStats_STATSProcess(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     244529 characters generated by Talend Open Studio for Big Data 
 *     on the 25 November 2020 at 2:52:43 PM IST
 ************************************************************************************************/